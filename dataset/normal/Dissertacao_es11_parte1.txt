Vários autores definem Engenharia de Software como uma disciplina que aplica os princípios de engenharia objetivando produzir software com alta qualidade e baixo custo. O desenvolvimento e aplicação de métodos, técnicas e ferramentas de suporte fazem parte do escopo das atividades de Engenharia de Software fornecendo para a equipe de desenvolvimento meios para que esses objetivos possam ser atendidos.
Para que o produto de software atinja um grau de qualidade aceitável, são necessárias atividades de garantia de qualidade, dentre elas, de verificação e validação, durante todo o processo de desenvolvimento desse software. A verificação é composta de atividades que asseguram a construção correta do software, e a validação envolve atividades que procuram garantir que o software construído atenda aos requisitos do usuário.
Dentre as técnicas de verificação e validação, o teste é, sem dúvida, a atividade mais utilizada. Segundo Myers, teste é um procedimento de executar um programa com a intenção de encontrar erros existentes. Essa atividade apresenta-se bastante onerosa podendo, em alguns casos, consumir 40% dos custos de desenvolvimento do software. Buscando reduzir os custos associados com essa atividade, técnicas e critérios de teste são propostos, servindo para conduzir e avaliar a qualidade da atividade de teste. Esses critérios definem conjuntos de requisitos de teste que devem ser satisfeitos pelos casos de teste, auxiliando o testador a sistematicamente selecionar um subconjunto de casos de teste a partir do domínio de entrada do programa em teste. Em geral, os critérios são classificados, nas seguintes técnicas: Funcional – na qual o software é testado como uma "caixa preta", onde é verificado se o software realiza as funções especificadas –; Estrutural – onde os aspectos de implementação são importantes para o desenvolvimento dos testes – e a técnica Baseada em Erros – que focaliza os erros que o programador pode cometer durante o desenvolvimento. 
Essas técnicas se diferenciam, basicamente, pela origem da informação usada para avaliar ou para construir conjuntos de casos de teste, onde cada técnica possui um conjunto de critérios para esse fim. Com isso, nenhuma das técnicas de teste é suficiente isoladamente para garantir a qualidade da atividade de teste. As diferentes técnicas se complementam e devem ser aplicadas em conjunto para tentar-se assegurar um teste de boa qualidade. 
Apesar dos esforços durante a atividade de teste, não se pode garantir um software livre de erros. Os testes somente contribuem para aumentar a confiança de que o software funciona de acordo com o esperado, onde grande parte dos erros (geralmente os mais prováveis) já foram detectados.
A utilização de ferramentas que procuram automatizar essa atividade propicia uma maior eficácia e uma redução do esforço necessário para a sua realização, além de diminuir os erros nesta atividade decorrentes da intervenção humana. A disponibilidade de ferramentas de teste oferece também recursos para o desenvolvimento de estudos empíricos de modo a avaliar o custo e a eficácia das técnicas e critérios de teste nos quais as ferramentas se baseiam.
Devido a diversidade de critérios de teste existentes uma questão que surge é: "Qual critério utilizar para obter o melhor resultado com o menor custo?". A realização de estudos empíricos procura responder a esta e outras dúvidas que surgem no momento de decidir se um programa está ou não suficientemente testado. Através da comparação entre os critérios de teste procura-se obter uma estratégia que seja eficaz para revelar a presença de defeitos (ou erros) no programa, com baixo custo de aplicação.
Com o auxílio de ferramentas de teste que apoiam o critério Análise de Mutantes, como Proteum, para programas C, e Mothra, para programas Fortran, e que apoiam os critérios Baseados em Fluxo de Dados, como é o caso da Poke-Tool, Atac e Asset, experimentos estão sendo conduzidos os quais possibilitam medir o desempenho do critério Análise de Mutantes, como também verificar o seu relacionamento com outros critérios.
Como a atividade de teste não pode garantir a ausência de erros, certamente, esses serão detectados após o software ter sido liberado. Além disso, o usuário pode necessitar a inclusão de novas funcionalidades ao software, como também a sua adequação a um novo ambiente. Essas e outras formas de modificações caracterizam a atividade de manutenção. A manutenção envolve qualquer mudança feita após o software estar em uso.
Realizada a manutenção, testes devem ser conduzidos para garantir que a qualidade do software não foi afetada pelas modificações. Esses testes, conhecidos como Testes de Regressão, têm por objetivo retestar o software modificado para evidenciar a presença de possíveis defeitos introduzidos com as alterações.
Após a modificação do programa, todo o conjunto de casos de teste, utilizado durante o teste original, deveria ser executado novamente para revelar possíveis defeitos introduzidos com a manutenção, comparando-se as saídas obtidas pelo programa modificado com as saídas registradas pelo programa original. Apesar dessa estratégia facilitar a geração de casos de teste para o teste de regressão, o seu uso pode tornar-se proibitivo devido ao tempo requerido para execução dos testes e análise dos resultados, onde todo o programa é testado novamente, até mesmo as partes do programa que não foram afetadas pelas modificações.
A estratégia seletiva para geração do teste de regressão apresenta-se como uma alternativa vantajosa, onde somente os casos de teste que executam as partes do programa afetadas pelas modificações são utilizados no teste, e novos casos de teste são inseridos no conjunto quando funcionalidades são adicionadas ao programa.
Utilizando ferramentas de teste o conjunto de casos de teste pode ser facilmente obtido para a realização do teste de regressão. Entretanto, é necessário que esse conjunto seja o mais adequado possível e, principalmente, mínimo para melhorar a relação custo-eficiência desta atividade. Para obtenção de um conjunto de casos de teste mínimo é necessário eliminar os casos de teste obsoletos e redundantes, ou seja, casos de teste que não modificam o grau de adequação do conjunto de casos de teste em relação ao critério escolhido.
Casos de teste redundantes surgem da tentativa do testador de obter um conjunto de teste que seja adequado ao critério utilizado, onde para esse fim inserem-se diversos casos de teste, sem a preocupação da não redundância. Outro fato que causa redundância é a geração aleatória, onde grandes conjuntos de teste são gerados baseando-se apenas no domínio de entrada do programa. Casos de teste obsoletos surgem quando, devido a algum tipo de manutenção, o requisito relacionado a esse caso de teste, por exemplo um caminho, é eliminado do programa, não fazendo mais sentido a existência desse caso de teste no conjunto.
Estratégias que realizam a minimização de conjuntos de casos de teste permitem reduzir os custos asssociados a atividade de teste, mais particularmente, ao critério em questão. Existem algumas estratégias propostas que visam a obtenção do menor conjunto possível a partir de um conjunto inicial, buscando, desta forma, a máxima redução. Outra vantagem da minimização é a possibilidade de fornecer parâmetros mais reais para quantificar o custo de aplicação de um critério durante o desenvolvimento de estudos empíricos. Wong realizou um estudo neste sentido, avaliando o efeito da minimização de conjuntos de casos de teste na eficácia em revelar erros do critério Todos-Usos. Entretanto, ainda não existe nenhuma estratégia desenvolvida para minimização de conjuntos adequados ao critério Análise de Mutantes, principalmente para o teste de programas na linguagem C. Para essa linguagem, a única ferramenta de apoio ao critério Análise de Mutantes é a ferramenta Proteum, a qual não trata o problema da minimização.
Tendo-se apresentado o contexto onde este trabalho se insere, pode-se destacar alguns pontos essenciais para o seu desenvolvimento:
- O teste de software é uma das técnicas mais utilizadas nas atividades de verificação e validação de produtos de software;
- A atividade de teste pode, em alguns casos, consumir cerca de 40% do custo total de desenvolvimento;
- Apesar dos avanços obtidos na Engenharia de Software, erros estão presentes na maioria dos softwares liberados;
- Em relação à produtividade, é de suma importância a automatização dos métodos, técnicas e critérios que apoiam o desenvolvimento de software;
- Estudos empíricos e teóricos são fundamentais para avaliar o custo de aplicação e a eficácia em revelar erros, permitindo também demonstrar as características importantes e aspectos complementares entre as técnicas de teste;
- As informações obtidas na atividade de teste são fundamentais para a atividade de manutenção, ou seja, para a evolução do software.