Segundo Pressman, existem diversas categorias de software: software básico, sistemas de informação, sistemas científicos, sistemas embutidos, sistemas pessoais, sistemas de inteligência artificial e sistemas reativos. Um Sistema Reativo é um programa de computador que mantém um interação permanente com seu ambiente externo, o qual pode ser um usuário, um dispositivo de entrada ou uma outra parte do sistema. Seu comportamento é baseado na relação entre eventos de entrada e de saída que ocorrem discretamente no tempo. Como exemplos desses sistemas, podem­se citar controle de tráfego aéreo, controle metroviário e controle de monitoramento hospitalar. O contexto mais geral deste trabalho é a investigação de estratégias de teste e validação para o desenvolvimento de Sistemas Reativos, com ênfase no critério Análise de Mutantes. 
Observa­se que várias técnicas e critérios de teste de programas têm sido explorados no contexto de teste e validação de tais sistemas, principalmente no que diz respeito a seus aspectos comportamentais. O Grupo de Engenharia de Software do Instituto de Ciências Matemáticas e de Computação - ICMC/USP - vem desenvolvendo atividades de pesquisa concentradas no estudo de princípios, estratégias, métodos e critérios de teste e validação na produção de software, assim como na especificação e implementação de ferramentas que apóiem a realização das atividades de teste e viabilizem a avaliação do aspecto complementar desses critérios, através de estudos empíricos. Um desses critérios, a Análise de Mutantes, é alvo deste trabalho. 
Como dito anteriormente, o processo de desenvolvimento de software consiste de uma série de atividades, sendo que, mesmo com o uso de métodos, técnicas e ferramentas, erros podem ser introduzidos no produto. Dessa forma, para que o produto de software atinja um grau aceitável de qualidade, são necessárias atividades de garantia de qualidade durante todo o processo de desenvolvimento de software, das quais fazem parte as atividades de Verificação e Validação. Com a Verificação busca­se garantir que o produto está sendo desenvolvido da forma correta, ao passo que com a Validação tenta­se se assegurar que o produto que está sendo desenvolvido está em conformidade com as expectativas do cliente. Dentre as atividades de Verificação e Validação, o teste é uma das atividades mais utilizadas, sendo de grande importância para a identificação e eliminação de erros no produto. Segundo Pressman, a atividade de teste de software é um elemento crítico para a garantia de qualidade de software e representa a última revisão da especificação, projeto e codificação. Entretanto, a atividade de teste é uma das mais onerosas do desenvolvimento de software. A atividade de teste de software visa a aprimorar a produtividade e fornecer evidências de confiabilidade e qualidade de um produto de software, em complemento a outras atividades, como por exemplo, o uso de revisões e de técnicas formais rigorosas de especificação e de verificação. 
Visando a facilitar a especificação do aspecto comportamental de Sistemas Reativos, várias técnicas de especificação foram propostas. Essas técnicas tentam conciliar o poder de modelagem com a capacidade de análise de propriedades do sistema. Dentre essas técnicas estão as baseadas em modelos de Máquinas de Transição de Estados, nas quais o aspecto comportamental é modelado através de eventos discretos no tempo. Como exemplos de técnicas dessa categoria, têm­se: Máquinas de Estados Finitos, Statecharts e Redes de Petri. Considerando essas técnicas, Fabbri explorou a adequação do uso do conceito de mutação no contexto de teste e validação de aspectos comportamentais de Sistemas Reativos. O critério Análise de Mutantes e critérios alternativos denominados Mutação Restrita e Mutação Aleatória, bem como os operadores de mutação para essas técnicas também foram definidos. Para apoiar a aplicação da Análise de Mutantes neste contexto, Fabbri especificou a ferramenta Proteum­RS (PROduct TEsting Using Mutation for Reactive Systems), e a instanciou para apoiar a validação de especificações baseadas em Máquinas de Estados Finitos, originando a Proteum­RS/FSM.  Posteriormente, Sugeta instanciou a Proteum­RS para a validação de Statecharts, originando a Proteum­RS/ST. 
A Análise de Mutantes surgiu na década de 70 na Yale University e Georgia Institute of Technology e é um dos critérios da técnica baseada em erros. Basicamente, são feitas pequenas alterações sintáticas em um programa P, gerando um conjunto de programas, denominados mutantes do programa original e constróem­se casos de teste capazes de mostrar diferenças de comportamento entre P e seus mutantes. Por meio de estudos empíricos, tem sido demonstrado que a Análise de Mutantes é um critério altamente eficaz em revelar erros em programas. Apesar de ter sido inicialmente proposta para o teste de programas em nível de unidade, a Análise de Mutantes vem sendo utilizada em diversos outros contextos, tais como o teste de integração e o teste de especificação de Sistemas Reativos. Para a validação de especificações, da forma proposta nas pesquisas realizadas, a especificação original é a base para a geração de mutantes, através da aplicação de operadores de mutação. Em seguida, a simulação de cada mutante e a comparação dos resultados obtidos com os da especificação original permitem verificar a adequação do teste e, conseqüentemente, aumentar a confiança na especificação original.