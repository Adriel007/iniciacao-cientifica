Sistemas baseados em computação estão sendo utilizados em praticamente todas as áreas da atividade humana, provocando uma crescente demanda por qualidade e produtividade. A Engenharia de Software é uma disciplina que evoluiu nas últimas décadas procurando estabelecer técnicas, critérios, métodos e ferramentas para a produção de software. Paralelamente ao processo de desenvolvimento, tem-se a Garantia de Qualidade de Software, que é um conjunto de atividades de apoio que visam a assegurar a qualidade a cada passo do processo. Neste contexto, têm-se as atividades de VV&T - Verificação, Validação e Teste.
A atividade de Teste de Software visa a aprimorar a produtividade e a fornecer evidências de confiabilidade e qualidade de um produto de software, em complemento a outras atividades, como por exemplo, o uso de revisões e de técnicas formais e rigorosas de especificação e de verificação. 
O software pode ser classificado em diversas categorias: Software Básico, Sistemas de Informação, Sistemas Científicos, Sistemas Embutidos, Sistemas Pessoais, Sistemas de Inteligência Artificial e Sistemas Reativos. Sistemas desta última classe, os Sistemas Reativos, caracterizam-se por interagir continuamente com o ambiente, reagindo a eventos externos gerados pelo processo controlado. Incluem-se nessa classe, Sistemas de Tempo Real, Sistemas Embutidos e Sistemas Críticos com relação à segurança. Como exemplos desses sistemas, pode-se citar controle de tráfego aéreo, controle metroviário, controle de monitoramento hospitalar, dentre outros. Portanto, os Sistemas Reativos controlam algumas atividades humanas essenciais e por isso, a atividade de teste no desenvolvimento dos mesmos é ainda mais crucial, dado que a ocorrência de falhas nesses sistemas pode colocar em risco vidas humanas ou determinar elevados prejuízos materiais. 
Podem-se agrupar os critérios de teste em três técnicas: Técnica Funcional, Técnica Estrutural e Técnica Baseada em Erros. Em nível de programa, os critérios de teste existentes são complementares e devem ser aplicados em conjunto, aumentando dessa maneira a qualidade da atividade de teste. Um dos principais critérios da Técnica Baseada em Erros é o critério Análise de Mutantes, utilizado no contexto deste trabalho. 
Os critérios de teste estabelecem requisitos que devem ser cumpridos e, através da análise da satisfação desses requisitos, consegue-se uma maneira de quantificar a atividade de teste. Esta análise da satisfação dos requisitos é denominada análise de cobertura ou análise de adequação. Além de estabelecerem requisitos de teste, os critérios podem ser utilizados tanto para auxiliar a geração de conjuntos de casos de teste como para auxiliar a avaliação da adequação de conjuntos de casos de teste. 
Técnicas e critérios de teste fornecem ao desenvolvedor uma abordagem sistemática e teoricamente fundamentada, além de constituírem um mecanismo que pode auxiliar a avaliar a qualidade e a adequação da atividade de teste. Maldonado destaca que, reconhecido o caráter complementar das técnicas e critérios de teste e a diversidade de critérios que têm sido estabelecidos, um ponto crucial que se coloca nessa perspectiva é a escolha e/ou a determinação de uma estratégia de teste, que em última análise passa pela escolha de critérios de teste, de forma que as vantagens de cada um desses critérios sejam combinadas objetivando uma atividade de teste de maior qualidade. 
O desenvolvimento de ferramentas para o suporte à atividade de teste também é relevante, uma vez que essa atividade é muito propensa a erros e improdutiva, se aplicada manualmente. Além disso, as ferramentas podem apoiar estudos empíricos que visem a avaliar e a comparar os diversos critérios de teste. Dessa maneira, a disponibilidade de ferramentas propicia maior qualidade e produtividade para as atividades de teste. Segundo Maldonado, podem-se observar diversos esforços da comunidade científica nessa direção. 
De acordo com a Engenharia de Software, métodos devem ser utilizados para apoiar o trabalho do projetista durante todo o processo de desenvolvimento do software, visando assim, ao aumento da qualidade e à minimização da inserção de erros no software. Classificam-se esses métodos como informais ou formais, sendo que a principal diferença está no fato de que os métodos informais não possuem base matemática, enquanto que os métodos formais possuem embasamento matemático. 
Os métodos formais permitem que se especifique, desenvolva e verifique o software ou parte dele, de modo sistemático. A sua base matemática fornece meios de se definirem, com precisão, noções de consistência, corretitude e completitude, além de possibilitar a verificação de propriedades do software sem a necessidade de executá-lo para mostrar seu comportamento. Esses métodos são utilizados geralmente para especificar o comportamento e propriedades estruturais do software. Se aplicados nas fases iniciais do desenvolvimento do software, eles podem detectar erros que só seriam descobertos nas fases de teste e depuração, e quando utilizados em fases mais adiantadas do desenvolvimento, auxiliam na determinação da corretitude da implementação e da equivalência de diferentes implementações. Exemplos de técnicas utilizadas pelos métodos formais são: Máquinas de Estados Finitos (MEFs), Redes de Petri e Statecharts. 
Sendo assim, este trabalho contribui para o estabelecimento de estratégias de teste e validação para o desenvolvimento de Sistemas Reativos/Concorrentes, com ênfase no critério Análise de Mutantes e na técnica Statecharts, dando continuidade ao trabalho desenvolvido por Fabbri.