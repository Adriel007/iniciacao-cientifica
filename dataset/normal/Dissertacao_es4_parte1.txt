A Engenharia de Software é uma disciplina em evolução e que está em consonância com a tecnologia de computadores e com os requisitos de novas áreas de aplicação, tendo como objetivo principal produzir softwares de alta qualidade e de baixo custo. Abrange inúmeras áreas de pesquisa: engenharia de requisitos, projeto, verificação, validação e teste, manutenção, planejamento, gerenciamento de configuração, entre outras.
Dentre as fases do ciclo de vida de desenvolvimento de um software, a fase de teste apresenta-se como uma revisão de todas as outras fases, bem como um elemento crítico para assegurar a qualidade do software.
As atividades de teste de software consomem, em projetos típicos, na ordem de 40% do esforço total. O fato de se ter um programa testado não garante a ausência de defeitos, o que não permite afirmar que o programa está correto. Assim, o teste de software tem o objetivo de revelar defeitos, contribuindo para demonstrar que as funções do software estão sendo desempenhadas de acordo com a especificação.
Para apoiar a fase de teste de software, vários métodos, técnicas e ferramentas têm sido propostos, os quais contribuem para a sistematização e para o aprimoramento da qualidade dessa atividade e, conseqüentemente, da qualidade final do produto em desenvolvimento.
Dentre as atividades de teste de software, o projeto e a avaliação de casos de teste são tarefas essenciais; essas atividades englobam um conjunto de técnicas, critérios e métodos de projeto e avaliação de casos de teste, fornecendo ao projetista de software uma abordagem sistemática e teoricamente fundamentada.
As técnicas de teste podem ser classificadas em: funcional, estrutural, baseada em defeitos ou uma combinação das anteriores. O que diferencia essas três classes é a origem da informação utilizada para avaliar ou para construir conjuntos de casos de teste.
A técnica funcional aborda o software do ponto de vista macroscópico, tratando o programa como uma caixa preta, na qual o conteúdo (detalhes de implementação) não é conhecido. Por outro lado, a técnica estrutural, ou teste da caixa branca, é baseada no conhecimento da estrutura interna da implementação, mais especificamente no fluxo de controle e em informações do fluxo de dados necessárias para derivar os requisitos de teste. A técnica baseada em defeitos utiliza informações sobre os tipos mais comuns de defeitos cometidos pelo programador no processo de desenvolvimento de software, sendo a Semeadura de Erros (Error Seeding) e a Análise de Mutantes critérios dessa técnica.
Basicamente, a Análise de Mutantes é composta de quatro fases: a geração dos mutantes utilizando-se os operadores de mutação (esses operadores realizam transformações sintáticas no código fonte do programa), a execução do programa em teste, a execução dos mutantes e a análise dos mutantes. Esse critério utiliza-se de um processo de eliminação para mostrar que o programa em teste está correto, mostrando que nenhum dos mutantes, não equivalentes ao programa em teste, é correto. 
As técnicas de teste devem ser vistas como complementares, sendo que a questão está em como empregá-las de forma que as vantagens de cada uma delas resultem na determinação de uma atividade de teste de melhor qualidade.
Com o objetivo de automatizar as atividades de teste, várias ferramentas têm sido projetadas e implementadas, apoiando critérios de teste de diferentes técnicas. Como exemplos dessas ferramentas pode-se citar a Proteum que implementa o critério Análise de Mutantes para o teste de unidade, um critério da técnica baseada em defeitos e a POKE-TOOL que apóia os critérios Potenciais Usos, que são critérios baseados em fluxo de dados e critérios baseados em fluxo de controle. A ferramenta Proteum tem sido estendida no sentido de apoiar a aplicação do critério Mutação de Interface (Interface Mutation) no teste de integração. No contexto de teste de software, essas ferramentas têm um papel fundamental para se obter maior qualidade e produtividade na atividade de teste, além de viabilizar a aplicação e a condução de estudos empíricos comparativos entre as técnicas de teste.
Na literatura de Teste de Software, muitas vezes, os termos defeito (fault) e erro (error) têm sido utilizados como tendo o mesmo significado. Neste trabalho, será utilizado o termo erro como conseqüência de defeitos contidos no software e que possivelmente manifestam-se em falhas no sistema no qual o software faz parte.
Serão adotados os termos defeito para fault, erro para error e  falha para failure, segundo o Padrão IEEE para Engenharia de Software e em concordância com a terminologia utilizada na comunidade de Teste de Software no Brasil. Será utilizado também o termo Tolerância a Defeitos referindo-se a Fault Tolerance, embora usualmente este seja empregado como Tolerância a Falhas.
A comunidade de Tolerância a Defeitos no Brasil tem adotado o termo falha para fault, erro para error e defeito para failure, assim, referindo-se ao termo Fault Injection por Injeção de Falhas. Martins salienta que não existe ainda um consenso quanto à terminologia a ser utilizada em Português para os termos fault, error e failure. Para manter uma uniformização, adaptam-se os termos utilizados em trabalhos nacionais da área de Tolerância a Defeitos à terminologia utilizada neste trabalho.
Segundo Clark, uma abordagem que vem sendo bastante empregada na validação de sistemas de computadores que precisam ser altamente confiáveis é a Injeção de Defeitos (Fault Injection). Além disso, segundo Voas, a Injeção de Defeitos de software é uma tecnologia emergente que pode ser utilizada para observar como o sistema de software comporta-se sob circunstâncias anômalas e experimentalmente controladas, podendo ser utilizada, assim como a atividade de teste de software, como uma medida da qualidade do sistema de software. Além da Injeção de Defeitos, Geist sugere que o critério Análise de Mutantes poderia ser valioso no projeto (desenvolvimento de software) de sistemas de software tolerantes a defeitos.
Inicialmente, a Injeção de Defeitos era uma técnica aplicada exclusivamente para hardware. Recentemente, essa técnica tem sido estendida para abordar defeitos de software; ainda são raros na literatura de Tolerância a Defeitos trabalhos que englobem essa abordagem e por isso, é alvo deste trabalho.
Para que a atividade de injeção de defeitos seja realizada de forma mais objetiva e eficaz, são requeridos modelos de defeitos e  métodos de injeção de defeitos. Modelos de defeitos e métodos de injeção para hardware têm recebido bastante atenção da comunidade científica, enquanto que para software ainda é um ponto em aberto como linha de pesquisa.
Nesse contexto, diversas ferramentas têm sido projetadas e implementadas. Para defeitos de software existem poucas ferramentas; uma delas é a FINE, uma ferramenta mais abrangente que aborda tanto defeitos de hardware como de software.
Em paralelo, existem diversos trabalhos que buscam entender e classificar os defeitos que ocorrem em sistemas de software. Um desses trabalhos é a taxonomia de DeMillo/Mathur que classifica os defeitos que ocorrem durante a fase de codificação do software. As taxonomias de defeitos podem ser consideradas um passo importante no estabelecimento de modelos de defeitos de software.
Este trabalho propõe um esquema de injeção de defeitos de software baseado na taxonomia  de defeitos de DeMillo e nos operadores de mutação do critério de teste Análise de Mutantes para a geração e injeção de defeitos.
