Sistemas baseados em computação têm sido utilizados em todas as áreas da atividade humana e, como conseqüência, aspectos de qualidade e produtividade somam­se à inerente dificuldade e complexidade da atividade de desenvolvimento de software. A Engenharia de Software pode ser definida como uma disciplina que aplica os princípios de engenharia com o objetivo de produzir software de alta qualidade e baixo custo. Através de um conjunto de etapas que envolvem o desenvolvimento e aplicação de métodos, técnicas e ferramentas, a Engenharia de Software oferece meios para que tais objetivos possam ser alcançados. 
Para que o produto de software atinja um grau de qualidade aceitável, atividades agregadas sob o nome de Garantia de Qualidade de Software, entre elas atividades de VV&T -Verificação, Validação e Teste - têm sido introduzidas ao longo de todo o processo de desenvolvimento de software. Dentre as técnicas de verificação e validação, a atividade de teste é uma das mais utilizadas, constituindo um dos elementos para fornecer evidências da confiabilidade do software em complemento a outras atividades, como por exemplo o uso de revisões e de técnicas formais e rigorosas de especificação e de verificação. 
A atividade de teste consiste em uma análise dinâmica do produto, sendo relevante para a identificação e eliminação dos erros 1 que persistem. Segundo Myers, o principal objetivo do teste de software é revelar a presença de erros ou defeitos no produto. Portanto, o teste bem sucedido é aquele que consegue determinar casos de teste para os quais o programa sendo testado falhe. 
Maldonado ressalta que, do ponto de vista de qualidade do processo, o teste sistemático é uma atividade fundamental para a ascensão ao Nível 3 do Modelo CMM 2 do SEI. Ainda, o conjunto de informação oriundo da atividade de teste é significativo para as atividades de depuração, manutenção e estimativa de confiabilidade de software. 
O teste de produtos de software envolve basicamente quatro etapas: planejamento de testes, projeto de casos de teste, execução e avaliação dos resultados dos testes. Essas atividades devem ser desenvolvidas ao longo do próprio processo de desenvolvimento de software e, em geral, concretizam­se em três fases: teste de unidade, teste de integração e teste de sistema. 
Salienta­se, entretanto, que a atividade de teste tem sido apontada entre as mais onerosas no desenvolvimento de software. Na tentativa de reduzir os custos associados ao teste, faz­se necessária a aplicação de técnicas e critérios que dêem indicações de como testar o software, quando parar os testes e que, se possível, forneçam uma medida objetiva do nível de confiança e de qualidade alcançados com os testes realizados. 
Em geral, os critérios de teste de software são estabelecidos a partir de três técnicas: funcional, estrutural e baseada em erros. Tais técnicas diferenciam­se pela origem da informação utilizada na avaliação e construção dos conjuntos de casos de teste. Na técnica funcional, os critérios e requisitos de teste são estabelecidos a partir da especificação funcional do software; na técnica estrutural, os critérios e requisitos são derivados essencialmente a partir das características de uma particular implementação em teste; e, na técnica baseada em erros, os critérios e requisitos de teste são oriundos do conhecimento sobre erros típicos cometidos durante o processo de desenvolvimento de software.
Ainda, segundo Maldonado, as técnicas de teste devem ser vistas como complementares e a questão que se coloca está em como utilizá­las de forma que as vantagens de cada uma sejam melhor exploradas em uma estratégia de teste que leve a um teste de boa qualidade, ou seja, eficaz em revelar a presença de erros e de baixo custo. As técnicas e critérios de teste fornecem ao desenvolvedor uma abordagem sistemática e teoricamente fundamentada, além de constituírem um mecanismo de auxílio para avaliar a qualidade e a adequação da atividade de teste. Critérios de teste podem ser utilizados para auxiliar tanto na geração de conjuntos de casos de teste como na avaliação da adequação desses conjuntos. 
Para que os testes possam ser conduzidos de maneira satisfatória e livre de erros decorrentes da intervenção humana, o desenvolvimento de ferramentas que buscam automatizar essa atividade é fundamental. Além disso, a disponibilidade de ferramentas de teste oferece recursos para o desenvolvimento de estudos empíricos que visem a avaliar e a comparar os diversos critérios de teste existentes. Observa­se na literatura um grande esforço da comunidade de teste nessa direção. 
Uma das linhas de atuação do Grupo de Engenharia de Software do ICMC/USP (em conjunto com o Grupo de Teste do DCA/FEE/UNICAMP) tem concentrado suas atividades no estudo de princípios, estratégias, métodos e critérios de teste e validação na produção de software, bem como na especificação e implementação de ferramentas que apóiem a realização da atividade de teste e viabilizem a avaliação do aspecto complementar dos critérios, através de estudos empíricos. 
Dentro desse contexto, três ferramentas de teste foram desenvolvidas -- a Poke­Tool, a Proteum e a Proteum/IM -- que apóiam os critérios Potenciais­Usos, Análise de Mutantes e Mutação de Interface (Interface Mutation), respectivamente. A implementação dessas ferramentas viabilizou o início de trabalhos comparativos entre os critérios de teste funcional, estrutural e baseado em erros, bem como o estudo e avaliação de variantes da Análise de Mutantes e de mecanismos que tornem viável a aplicação dessas técnicas e critérios em ambientes de produção de software.
Este trabalho está em consonância com os demais trabalhos desenvolvidos pelo Grupo de Engenharia de Software do ICMC/USP e objetiva contribuir na determinação de formas alternativas e de baixo custo para a aplicação do critério Análise de Mutantes.