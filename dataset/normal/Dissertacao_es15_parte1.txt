O uso cada vez mais intenso de sistemas de computadores em praticamente todas as atividades da sociedade contemporânea tem aumentado a demanda por produtos de software. Isto, somado ao ambiente de grande competitividade característico da economia atual, determina uma busca crescente por produtos de alta qualidade e, conseqüentemente, por processos mais eficientes e seguros de desenvolvimento. Esses são os objetivos principais da Engenharia de Software. 
O desenvolvimento de software é organizado em uma série de atividades. Cada atividade produz um conjunto de documentos que é utilizado pelas atividades subseqüentes. Mesmo existindo diversos paradigmas de desenvolvimento, essas atividades são organizadas em três fases genéricas, independentemente da área de aplicação, tamanho ou complexidade do projeto. Essas fases são: 
- definição: durante a fase de definição, o desenvolvedor de software focaliza o quê deve ser feito, identificando quais informações devem ser processadas, qual a função e desempenho desejados, quais critérios de validação são exigidos para definir um sistema bem­sucedido etc.; um dos principais produtos gerados nessa fase é a Especificação do Sistema, que descreve os requisitos que o sistema deve atender;
- desenvolvimento: durante a fase de desenvolvimento, o desenvolvedor de software focaliza como o sistema deve ser construído, definindo quais serão as estruturas de dados e a arquitetura utilizadas, como o projeto será traduzido em uma linguagem de programação, etc.; a última atividade dessa fase é a atividade de teste, na qual o software, em sua forma executável, é testado para que se possam descobrir erros de função, lógica e implementação;
- manutenção: a fase de manutenção estende­se por todo o período em que o software é utilizado e seu foco principal está nas mudanças que devem ser feitas no software associadas a correções de erros, adaptações exigidas pela evolução do ambiente no qual o software está inserido e ampliações feitas para a introdução de novas funcionalidades requeridas pelo cliente. 
Segundo Pressman, a fase de manutenção consome aproximadamente 60% do orçamento de software de uma organização de desenvolvimento. Dentre as várias causas citadas para esse custo elevado estão as negligências cometidas durante a definição, projeto, codificação e teste do programa. Uma atividade de teste mal conduzida aumenta o custo de manutenção devido a muitas mudanças de correção que precisam ser feitas no software quando os erros forem detectados pelo usuário. Por esse motivo, a atividade de teste deve ser conduzida de forma sistemática e criteriosa. Basicamente, essa atividade envolve quatro etapas:
- Planejamento de Teste;
- Projeto de Casos de Teste;
- Execução;
- Avaliação dos Resultados dos Testes. 
Para ser eficaz em revelar erros, a atividade de teste é conduzida em três fases: 
- teste de Unidade: concentra­se na validação da menor unidade de projeto de software; dependendo da granularidade escolhida, essa unidade pode ser tanto um módulo quanto um procedimento do programa;
- teste de Integração: concentra­se na validação das interfaces entre os módulos e é aplicado após os módulos terem sido testados individualmente;
- teste de Sistema: concentra­se na validação do software integrado em seu ambiente, avaliando o seu desempenho, segurança, robustez etc. 
Segundo Maldonado, dois pontos cruciais na atividade de teste são o projeto e a avaliação da qualidade de um determinado conjunto de casos de teste T utilizado para o teste de um produto P, dado que, em geral, é impraticável utilizar todo o domínio de dados de entrada para avaliar os aspectos funcionais e operacionais do produto em teste. O objetivo é utilizarem­se casos de teste que tenham alta probabilidade de encontrar a maioria dos erros, porém, com um mínimo de tempo e esforço. 
Na tentativa de reduzir o custo da atividade de teste, várias técnicas e critérios têm sido propostos para auxiliar sua condução e avaliação. As técnicas e critérios de teste fornecem ao testador uma abordagem sistemática e teoricamente fundamentada, além de constituírem um mecanismo que auxilia a avaliar a qualidade da atividade de teste. Normalmente, os critérios são divididos em três técnicas, cuja diferença básica está na origem da informação que é utilizada para avaliar ou construir conjuntos de casos de teste. Essas técnicas são: 
- técnica funcional: também conhecida como teste de caixa preta, utiliza­se da especificação do software para obter os requisitos de testes;
- técnica estrutural: também conhecida como teste de caixa branca, derivam­se os requisitos de teste a partir dos aspectos de implementação do software;
- técnica baseada em erros: Os elementos requeridos para caracterizar a atividade de teste são baseados em erros típicos que podem ocorrer durante o desenvolvimento do software.
É importante notar que nenhuma dessas técnicas é completa, no sentido de que, em geral, nenhuma delas é suficiente para garantir a qualidade da atividade de teste. Na verdade, essas diferentes técnicas se complementam e devem ser aplicadas em conjunto para tentar assegurar um teste de melhor qualidade, o que torna necessária a determinação de estratégias de teste que combinem as vantagens de cada uma. Com esse propósito, estudos empíricos e teóricos são de vital importância para fornecer subsídios para o estabelecimento de estratégias de baixo custo e alta eficácia. 
No entanto, como toda atividade humana, a atividade de teste também está sujeita a erros e, em geral, sua condução manual é improdutiva. Portanto, é fundamental a existência de ferramentas de teste que dêem suporte à sua aplicação. A disponibilidade de ferramentas de teste contribui para um desenvolvimento de software de maior qualidade e produtividade.  Diversos esforços da comunidade científica nessa direção são observados. Por parte da indústria, podese observar o esforço alocado pela Telcordia (USA), em cooperação com o SERC/Purdue University (USA), para o desenvolvimento das ferramentas xATAC, que apóia a aplicação de critérios baseados na análise de fluxo de controle e de dados, e xRegress, que reduz o custo do teste de regressão. Ambas as ferramentas fazem parte do xSuds (Software Understanding System), um pacote para visualização e análise de software.